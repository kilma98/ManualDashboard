"""add humidity to measurements

Revision ID: b632f4ac32eb
Revises: 0001
Create Date: 2025-09-23 11:07:06.779852

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b632f4ac32eb'
down_revision: Union[str, Sequence[str], None] = '0001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.add_column('measurements', sa.Column('humidity', sa.Float(), nullable=True))
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
   # op.drop_table('users')
    op.drop_index(op.f('ix_measurements_id'), table_name='measurements')
    op.drop_index(op.f('ix_measurements_timestamp'), table_name='measurements')
    op.drop_index(op.f('ix_measurements_user_id'), table_name='measurements')
    op.drop_table('measurements')
    op.drop_index(op.f('ix_thresholds_id'), table_name='thresholds')
    op.drop_index(op.f('ix_thresholds_user_id'), table_name='thresholds')
    op.drop_table('thresholds')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('measurements', 'humidity')
    op.create_table('thresholds',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ph_min', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ph_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ec_min', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ec_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('oxygen_min', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('oxygen_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('thresholds_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('thresholds_pkey'))
    )
    op.create_index(op.f('ix_thresholds_user_id'), 'thresholds', ['user_id'], unique=False)
    op.create_index(op.f('ix_thresholds_id'), 'thresholds', ['id'], unique=False)
    op.create_table('measurements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ph', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ec', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('oxygen', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('measurements_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('measurements_pkey'))
    )
    op.create_index(op.f('ix_measurements_user_id'), 'measurements', ['user_id'], unique=False)
    op.create_index(op.f('ix_measurements_timestamp'), 'measurements', ['timestamp'], unique=False)
    op.create_index(op.f('ix_measurements_id'), 'measurements', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=10), server_default=sa.text("'user'::character varying"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###
